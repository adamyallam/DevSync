// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                Int       @id @default(autoincrement())
  ownerID           Int
  owner             User      @relation("ProjectOwner", fields: [ownerID], references: [id], onDelete: Cascade)
  sections          Section[] 
  tasks             Task[] 

  name              String    @db.Text
  descriptionTitle  String    @default("Project description") @db.Text
  description       String    @db.Text
  defaultView       String    @default("list")
  status            Status?   @default(SetStatus)
  favorited         Boolean   @default(false)
  dueDate           DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model User {
  id       Int       @id @default(autoincrement())
  projects Project[] @relation("ProjectOwner")

  firstName String   @db.Text
  lastName  String   @db.Text
  username  String   @unique @db.Text
  email     String   @unique @db.Text
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDemo    Boolean  @default(false)
}

model Task {
  id        Int     @id @default(autoincrement())
  projectID Int
  sectionID Int
  project   Project @relation(fields: [projectID], references: [id], onDelete: Cascade)
  section   Section @relation(fields: [sectionID], references: [id], onDelete: Cascade)

  name        String?   @default("")
  description String?   @default("New task")
  status      Status?   @default(SetStatus)
  priority    Priority? @default(SetPriority)
  completed   Boolean?  @default(false)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id        Int     @id @default(autoincrement())
  projectID Int
  project   Project @relation(fields: [projectID], references: [id], onDelete: Cascade)
  tasks     Task[]

  name        String?   @default("")
  description String?   @db.Text
  status      Status?   @default(SetStatus)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Priority {
  SetPriority
  High
  Medium
  Low
}

enum Status {
  SetStatus
  OnTrack
  AtRisk
  OffTrack
  OnHold
  Complete
}
