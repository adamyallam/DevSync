// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id       Int       @id @default(autoincrement())
  ownerID  Int
  owner    User      @relation("ProjectOwner", fields: [ownerID], references: [id], onDelete: Cascade)
  sections Section[]
  tasks    Task[]

  name             String    @db.VarChar(60)
  descriptionTitle String    @default("Project description") @db.VarChar(60)
  description      String    @db.VarChar(3000)
  defaultView      String    @default("list")
  status           Status?   @default(SetStatus)
  favorited        Boolean   @default(false)
  dueDate          DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model User {
  id       Int       @id @default(autoincrement())
  projects Project[] @relation("ProjectOwner")

  firstName String   @db.VarChar(40)
  lastName  String   @db.VarChar(40)
  username  String   @unique @db.VarChar(20)
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        Int      @id @default(autoincrement())
  projectID Int
  sectionID Int?
  project   Project  @relation(fields: [projectID], references: [id])
  section   Section? @relation(fields: [sectionID], references: [id])

  name        String    @db.VarChar(60)
  description String?   @db.VarChar(300)
  comments    String?   @db.VarChar(300)
  status      Status?   @default(SetStatus)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id        Int     @id @default(autoincrement())
  projectID Int
  project   Project @relation(fields: [projectID], references: [id], onDelete: Cascade)
  tasks     Task[]

  name        String?   @default("") @db.VarChar(60)
  description String?   @db.VarChar(300)
  status      Status?   @default(SetStatus)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// model Comment {
//   id     Int  @id @default(autoincrement())
//   task   Task @relation(fields: [taskId], references: [id])
//   taskId Int
//   author User @relation(fields: [userId], references: [id])
//   userId Int

//   title       String
//   description String
//   postedAt    DateTime @default(now())
// }

enum Status {
  SetStatus
  OnTrack
  AtRisk
  OffTrack
  OnHold
  Complete
}
