// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id       Int       @id @default(autoincrement())
  ownerID  Int
  owner    User      @relation("ProjectOwner", fields: [ownerID], references: [id], onDelete: Cascade)
  sections Section[]
  members  User[]    @relation("ProjectMembers")
  tasks    Task[]

  name        String    @db.VarChar(60)
  description String    @db.VarChar(300)
  defaultView String    @default("list")
  status      Status?   @default(NotStarted)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id            Int       @id @default(autoincrement())
  ownedProjects Project[] @relation("ProjectOwner")
  projects      Project[] @relation("ProjectMembers")
  sections      Section[]
  tasks         Task[]
  comments      Comment[]

  firstName String   @db.VarChar(40)
  lastName  String   @db.VarChar(40)
  username  String   @unique @db.VarChar(20)
  email     String   @unique
  password  String
  role      Role?    @default(DEVELOPER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        Int       @id @default(autoincrement())
  projectID Int
  sectionID Int?
  project   Project   @relation(fields: [projectID], references: [id])
  section   Section?  @relation(fields: [sectionID], references: [id])
  users     User[]
  Comments  Comment[]

  name        String    @db.VarChar(60)
  description String?   @db.VarChar(300)
  comments    String?   @db.VarChar(300)
  status      Status?   @default(NotStarted)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id        Int     @id @default(autoincrement())
  projectID Int
  userID    Int
  users     User    @relation(fields: [userID], references: [id])
  project   Project @relation(fields: [projectID], references: [id])
  tasks     Task[]

  name        String    @db.VarChar(60)
  description String?   @db.VarChar(300)
  status      Status?   @default(NotStarted)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id     Int  @id @default(autoincrement())
  task   Task @relation(fields: [taskId], references: [id])
  taskId Int
  author User @relation(fields: [userId], references: [id])
  userId Int

  title       String
  description String
  postedAt    DateTime @default(now())
}

enum Role {
  DEVELOPER
  MODERATOR
  ADMIN
  OWNER
}

enum Status {
  NotStarted
  OnTrack
  AtRisk
  OffTrack
  OnHold
}
